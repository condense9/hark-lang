// ruby-doc.org/docs/ruby-doc-bundle/Manual/man-1.4/yacc.html
//
// Kinda like Ruby.
//
// Considerations
// - paradigm (functional)
// - assignment... ??
// - scope
// - easy of implementation
//
// Features
// - easy FFI (import a Python module and call functions in it)
// - ? lambdas (objects that can be evaluated with arguments substituted in)
// - function definition (named lambda expressions)
// - handle JSON-like data
// - ? closures (lambdas that capture lexical scope)
//
// Syntax must support
// - function definition
// - value binding (in a given scope, this is just an anonymous lambda application)
// - ? async/await
//
// Design decisions
// - variables is immutable (no reassignment, so line-order is irrelevant)
// - functions are pure
// - side-effects achieved through foreign calls (or built-in specials)
// -

program : expression_list

expression_list : expression [terminator]
                | expression_list expression terminator
                | terminator


expression : literal
           | function_call
           | inline_expr
           | variable


inline_expr : expression inline_operator expression
            | "(" inline_expr ")"

inline_operator : "+" -> add
                | "-" -> subtract
                | "*" -> multiply
                | "/" -> divide

function_call : fname expression*
              | fname "(" fn_args ")"

fn_args : fn_arg ("," fn_arg)*
fn_arg  : expression


special : /![a-zA-Z_][a-zA-Z0-9_]*/

fname : IDENTIFIER
vname : IDENTIFIER


terminator : terminator SEMICOLON
           | terminator NEWLINE
           | SEMICOLON
           | NEWLINE



variable : vname
         | "null" -> null

// Just like JSON! But use symbols for bool
literal : dict
        | list
        | string
        | number
        | variable

list : "[" [ expression ("," expression)* ] "]"
dict : "{" [ pair  ("," pair)*  ] "}"
pair : expression ":" expression

string : ESCAPED_STRING
number : SIGNED_NUMBER

// Terminators (Lark terminators, that is)


IDENTIFIER : /[a-zA-Z_][a-zA-Z0-9_]*/

SEMICOLON : ";"

COMMENT : /#[^\n]*/


CR      : /\r/
LF      : /\n/
NEWLINE : ( /\r?\n[\t ]*/ | COMMENT )+

%ignore COMMENT


// Ruby-style symbol data-type
SYMBOL : /:[a-zA-Z_][a-zA-Z0-9_]*/

%import common.ESCAPED_STRING
%import common.SIGNED_NUMBER
%import common.WS
%ignore WS

