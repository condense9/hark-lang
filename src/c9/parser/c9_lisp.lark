// https ://github.com/antlr/grammars-v4/blob/master/clojure/Clojure.g4
// https ://www.braveclojure.com/core-functions-in-depth/

start : file

file : ( "(" top_form ")" )*

?top_form : python
          | def

python : "importpy" IDENTIFIER ":from" IDENTIFIER [":as" IDENTIFIER]

def        : ("def"|"defun"|"define") IDENTIFIER "(" def_params ")" def_body  -> def_
def_params : IDENTIFIER*
?def_body  : do_block


?sexp : atom
      | "(" special_form ")"
      | list
      | reader_macro

?special_form : let | if | do | quote | async

list   : "(" sexp* ")"        -> list_
// map : "{" (sexp sexp)* "}" -> map_

async : "async" sexp+ -> async_

if : "if" sexp~3 -> if_

// _cond :  TODO

let      : "let" "(" bindings ")" do_block
bindings : binding*
binding  : "(" IDENTIFIER sexp ")"

?do      : "do" do_block
do_block : sexp*

quote : "quote" sexp


?reader_macro : m_quote | m_async | m_wait

m_quote  : "'" sexp
// m_map : "#" sexp
m_async  : "@" sexp
m_wait   : "$" sexp

// sharp : "#'" sexp


?atom   : symbol | literal
literal : string
        | number
        | true
        | nil

symbol : IDENTIFIER
true   : TRUE
string : ESCAPED_STRING
number : SIGNED_NUMBER
nil    : NIL

// terminators, keywords

// https ://github.com/lark-parser/lark/blob/master/lark/grammars/common.lark
%import common.ESCAPED_STRING
%import common.SIGNED_NUMBER

TRUE : "t"

NIL : "nil"

IDENTIFIER : /[^\t\n\f,;\\ (){}0-9'"`$]+/


COMMENT : /;[^\n]*/

WS : /[ \t\f\r\n]/+

%ignore COMMENT
%ignore WS
